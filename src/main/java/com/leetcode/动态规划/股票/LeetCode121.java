package com.leetcode.动态规划.股票;

/**
 * 121. 买卖股票的最佳时机
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 * <p>
 * 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。
 * <p>
 * 注意：你不能在买入股票前卖出股票。
 * <p>
 * <p>
 * <p>
 * 示例 1:
 * <p>
 * 输入: [7,1,5,3,6,4]
 * 输出: 5
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
 * 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
 * 示例 2:
 * <p>
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 * <p>
 * dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])
 * dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i])
 * = max(dp[i-1][1][1], -prices[i])
 * 解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。
 * <p>
 * 现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。
 * 可以进行进一步化简去掉所有 k：
 * dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
 * dp[i][1] = max(dp[i-1][1], -prices[i])
 *
 * @author mai.gq
 * @date 2020/12/18
 */
public class LeetCode121 {

    //dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
    //              max(   选择 rest  ,             选择 sell      )
    //
    //解释：今天我没有持有股票，有两种可能：
    //要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；
    //要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。
    //
    //dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
    //              max(   选择 rest  ,           选择 buy         )
    //
    //解释：今天我持有着股票，有两种可能：
    //要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；
    //要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。
    public int maxProfit(int[] prices) {
        int len = prices.length;
        int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
        for (int i = 0; i < len; i++) {
            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);
            dp_i_1 = Math.max(dp_i_1, -prices[i]);
        }
        return dp_i_0;
    }
}
